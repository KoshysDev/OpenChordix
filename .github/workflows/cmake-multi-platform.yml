name: CMake Build (Arch Linux & Windows)

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows configuration (using MSVC)
          - os: windows-latest
            compiler: cl
            cpp_compiler: cl
            os_dependencies: ''
            vcpkg_triplet: x64-windows

          # Arch Linux configuration (using Docker container on Ubuntu runner)
          - os: ubuntu-latest
            container: archlinux:latest
            compiler: gcc
            cpp_compiler: g++
            os_dependencies: pacman -Syu --noconfirm && pacman -S --noconfirm base-devel cmake git rtaudio aubio alsa-lib pkgconf
            vcpkg_triplet: ''

    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}

    defaults:
      run:
        shell: bash

    env:
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Combine vcpkg setup and install for Windows
    - name: Setup vcpkg and Install RtAudio (Windows only)
      if: runner.os == 'Windows'
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgDirectory: ${{ env.VCPKG_ROOT }}
        vcpkgTriplet: ${{ matrix.vcpkg_triplet }}
        vcpkgArguments: 'rtaudio pkgconf'
        # cleanAfterInstall: true # Optional cleanup

    - name: Install Dependencies (Linux Container only)
      if: matrix.os_dependencies != '' && matrix.container != ''
      run: ${{ matrix.os_dependencies }}

    - name: Configure CMake
      run: |
        # Optional: Check CMake version
        cmake --version

        CMAKE_ARGS=(
          "-B build"
          "-S ."
          "-DCMAKE_BUILD_TYPE=Release"
        )

        # Add compiler definitions if specified in matrix (Not needed for MSVC 'cl')
        if [[ -n "${{ matrix.cpp_compiler }}" && "${{ matrix.cpp_compiler }}" != "cl" ]]; then
          CMAKE_ARGS+=("-DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}")
        fi
        if [[ -n "${{ matrix.compiler }}" && "${{ matrix.compiler }}" != "cl" ]]; then
          CMAKE_ARGS+=("-DCMAKE_C_COMPILER=${{ matrix.compiler }}")
        fi

        # Add vcpkg toolchain file ONLY for Windows builds
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          CMAKE_ARGS+=("-DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake")
          CMAKE_ARGS+=("-DVCPKG_TARGET_TRIPLET=${{ matrix.vcpkg_triplet }}")
        fi

        echo "Running CMake with args: ${CMAKE_ARGS[@]}"
        cmake "${CMAKE_ARGS[@]}"


    - name: Build
      run: cmake --build build --config Release
